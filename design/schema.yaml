# BP-JEL Schema.  Describes the schema for the BP-JEL language
# BP-JEL is a JSON based language for defining business processes

process :
  type : object
  required:
    - pid
    - name
  properties:
    pid:
      type: string
      description: process id
      example: mic-build
    name:
      type: string
      description: process name
      example: Build a Microphone
    description:
      type: string
      description: process description
      example: Build a Microphone
    metadata:
      type: object
      description: process metadata
      $ref: "#/components/schemas/ProcessMetaData"
    variables:
      type: array
      description: process scoped variables
      items:
        $ref: "#/components/schemas/Variable"
    outputs:
      type: array
      description: Process outputs
      items:
        $ref: "#/components/schemas/Variable"
    activities:
      type: array
      description: process activities. Can be activities or references to activities
      items:
        oneOf:
          - type: string
          - $ref: "#/components/schemas/Activity"
    activityRepo:
      type: array
      description: Repository of activities
      items:
        $ref: "#/components/schemas/Activity"
    events:
      type: array
      description: Events that can trigger or influence the process
      items:
        $ref: "#/components/schemas/Event"
      activity:
        oneOf:
          - type: string
          - $ref: "#/components/schemas/Activity"

components:
  schemas:
    Variable:
      type: object
      properties:
        name:
          type: string
          description: variable name
          example: R3 Value
        vid:
          type: string
          description: variable id
          example: r3-value
        description:
          type: string
          description: variable description
          example: Value of R3
        value:
          type: any
          description: variable value
          example: 12.87
        defaultValue:
          type: any
          description: default value
          example: Empty
        type:
          type: string
          enum:
            - String
            - Number
            - Boolean
            - Enum
            - Object
            - Array
            - URL
          description: variable type
          example: String
          constraint:
            ref: "#/components/schemas/VariableConstraint"
          presentation:
            ref: "#/components/schemas/VariablePresentation"  
    
    VariableConstraint:
      description: Variable constraints
      type: object
      properties:
        allowedValues:
          type: array
          description: allowed values
          example: ["Empty", "Value1", "Value2"]
        required:
          type: boolean
          description: is required
          example: true
        min:  
          type: number
          description: minimum value
          example: 0
        max:
          type: number
          description: maximum value
          example: 100
        minLength:  
          type: number
          description: minimum length
          example: 0
        maxLength:
          type: number
          description: maximum length
          example: 100
        pattern:
          type: string
          description: Regular Expression pattern
          example: ^[a-zA-Z0-9]*$

    VariablePresentation:
      description: Variable presentation details
      type: object
      properties:
        units:
          type: string
          description: variable units
          example: "kOhm"
        precision:
          type: number
          description: variable precision
          example: 2
        format:
          type: string
          description: variable format
          example: foo ${value} bar

    # Activity base schema
    Activity:
      description: Common Activity schema
      type: object
      required:
        - aid
        - type
      properties:
        aid:
          type: string
          example: r3-activity
          description: activity id. used to reference activity in process
        name:
          type: string
          example: Collect R3 value
          description: activity name
        description:
          type: string
        type:
          type: string
          enum:
            - HumanTask
            - Terminate
            - Sequence
            - RestAPI
            - Flow
            - Case
            - If
            - While
            - Catch
        status:
          type: string
          enum:
            - Pending
            - InProgress
            - Completed
            - Failed
            - Cancelled
            - TimedOut
        passFail:
          type: string
          enum:
            - Pass
            - Fail
        lifecycle:
          type: object
          description: Lifecycle hooks for this activity
          properties:
            beforeExecute:
              type: object
              code:
                description: Script or logic to execute after the activity completes
                type: object
                ref: "#/components/schemas/CodeBlock"
            afterExecute:
              type: object
              code:
                description: Script or logic to execute after the activity completes
                type: object
                ref: "#/components/schemas/CodeBlock"
        errorHandling:
          type: object
          description: Defines error handling for the process
          properties:
            onError:
              type: string
              enum: ["ABORT", "RETRY", "CONTINUE"]
              description: Action to take on error
              example: RETRY
            retryCount:
              type: integer
              description: Number of retries allowed
              example: 3
            retryDelay:
              type: integer
              description: Delay between retries in milliseconds
              example: 1000
            retryBackoff: 
              type: string
              enum: ["CONSTANT", "LINEAR", "EXPONENTIAL"]
              description: Retry backoff strategy
              example: EXPONENTIAL
        output:
          description: Output variables
          type: array
          items:
            $ref: "#/components/schemas/Variable"

    # HumanTaskActivity
    HumanTaskActivity:
      description: Human task activity.  For interacting with a human
      allOf:
        - $ref: "#/components/schemas/Activity"
        - type: object
          required:
            - type
            - inputs
          properties:
            type:
              const: HumanTask
            subject:
              type: string
            inputs:
              type: array
              items:
                oneOf:
                  - $ref: "#/Variable"
            fieldSets:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                  variables:
                    type: array
                    items:
                      $ref: "#/Variable"
            fileUploads:
              type: array
              items:
                type: object
                required:
                  - name
                  - allowedTypes
                  - maxBytes
                  - minCount
                  - maxCount
                properties:
                  name:
                    type: string
                  description:
                    type: string
                  allowedTypes:
                    type: array
                    items:
                      type: string
                  maxBytes:
                    type: number
                  minCount:
                    type: number
                  maxCount:
                    type: number
            attachments:
              type: array
              items:
                type: object
                required:
                  - name
                  - objectUrl
                  - previewUrl
                  - mediaType
                  - bytes
                properties:
                  name:
                    type: string
                  objectUrl:
                    type: string
                  previewUrl:
                    type: string
                  mediaType:
                    type: string
                  bytes:
                    type: number

    
    # RestAPIActivity
    RestAPIActivity:
      description: Rest API activity.  For calling a REST API
      allOf:
        - $ref: "#/Activity"
        - type: object
          required:
            - type
            - method
            - url
            - headers
          properties:
            type:
              const: RestAPI
            timeoutSeconds:
              description: Timeout in seconds
              type: number
              example: 30
            method:
              description: HTTP method
              type: string
              enum:
                - GET
                - POST
                - PUT
                - DELETE
            url:
              description: API Service URL
              type: string
              example: "https://example.com/api/v1/resource"
            headers:
              type: array
              description: HTTP headers
              items:
                type: object
                example: [{"key": "Authorization", "value": "Bearer oiweurlrinineoida987dnf8ehe"}]
                properties:
                  key:
                    type: string
                  value:
                    type: string
            queryParams:
              type: array
              description: Query parameters
              items:
                type: object
                example: [{"key": "param1", "value": "value1"}]
                properties:
                  key:
                    type: string
                  value:
                    type: string
            request:
              description: Request body
              example: {"key": "value"}
              type: object
            response:
              description: Response body set by calling the API
              type: object

    # ParallelActivity
    parallelActivity:
      description: Parallel activity.  Executes activities in parallel
      allOf:
        - $ref: "#/Activity"
        - type: object
          properties:
            type:
              const: Parallel
            activities:
              description: Activities to execute in parallel. Can be activities or references to activities
              type: array
              example: ["$Activity['r3-activity']", "$Activity['collect-something-else']"]
              items:
                oneOf:
                  - type: string
                  - $ref: "#/Activity"

    # SequenceActivity
    sequenceActivity:
      description: Sequence activity.  Executes activities in series
      allOf:
        - $ref: "#/Activity"
        - type: object
          properties:
            type:
              const: Sequence
            activities:
              description: Activities to execute in series. Can be activities or references to activities
              type: array
              example: ["$Activity['r3-activity']", "$Activity['collect-something-else']"]
              items:
                oneOf:
                  - type: string
                  - $ref: "#/Activity"


    # TerminateActivity
    TerminateActivity:
      description: Terminate activity.  Ends a process
      allOf:
        - $ref: "#/Activity"
        - type: object
          required:
            - type
            - reason
          properties:
            type:
              const: Terminate
            reason:
              type: string

    # IfActivity
    IfActivity:
      description: If activity. Conditionally executes activities in an if/else block
      allOf:
        - $ref: "#/Activity"
        - type: object
          required:
            - type
            - condition
            - then
          properties:
            type:
              const: If
            condition:
              type: string
            then:
              description: Activities to execute if condition is true. Can be an activity or a reference to an activity
              oneOf:
                - $ref: "#/Activity"
                - type: string
            else:
              description: Activities to execute if condition is false. Can be an activity or a reference to an activity
              oneOf:
                - $ref: "#/Activity"
                - type: string


    # CaseActivity schema
    CaseActivity:
      description: Case activity.  Conditionally executes activities in a case block
      allOf:
        - $ref: "#/Activity"
        - type: object
          required:
            - type
            - cases
          properties:
            type:
              const: Case
            cases:
              type: array
              items:
                type: object
                properties:
                  condition:
                    type: string
                  activity:
                    oneOf:
                      - type: string
                      - $ref: "#/Activity"

    # WhileActivity schema
    WhileActivity:
      description: While activity.  Conditionally executes activities while a condition is true
      allOf:
        - $ref: "#/Activity"
        - type: object
          required:
            - type
            - condition
            - activity
          properties:
            type:
              const: While
            condition:
              type: string
              example: i < 10
            activity:
              description: Activity to execute while condition is true. Can be an activity or a reference to an activity
              oneOf:
                - type: string
                - $ref: "#/Activity"
    CodeBlock:
      description: Code Exectuion Block
      type: object
      required:
        - language
        - code
      properties:
        language:
          type: string
          description: Programming language
          enum:
            - JS
        code:
          type: array
          description: Lines of code to execute
          example: ["$Activity['r3-activity'].value = $Activity['r3-activity'].value + 1;"]
          items:
            type: string
    
    Event:
      type: object
      properties:
        eventId:
          type: string
          description: Unique event ID
        name:
          type: string
          description: Event name
        trigger:
          type: string
          description: Trigger condition
          example: onStart
        actions:
          type: array
          description: Actions to perform when the event triggers
          items:
            oneOf:
              - type: string
              - $ref: "#/components/schemas/Activity"

    ProcessMetaData:
      type: object
      properties:
        version:
          type: string
          description: Schema version
          example: 1.0.0
        createdBy:
          type: string
          description: Creator of the process
          example: Admin
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the process was created
          example: 2025-01-01T12:00:00Z